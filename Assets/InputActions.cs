//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MK"",
            ""id"": ""4d9641eb-45b0-4c5c-86b5-d26f0d8040e5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3e2ef582-22e8-4fae-853a-d9dbec1c39de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9684e4ba-c0bf-4355-919d-71855cddfe80"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""073823a4-6865-440b-bd60-4a96178d8f8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryFire"",
                    ""type"": ""Button"",
                    ""id"": ""f8dd1856-fc9a-4e78-aeac-727cf71d6c3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryFire"",
                    ""type"": ""Button"",
                    ""id"": ""e9015758-ca01-462b-a6b0-6f8de38636f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jet"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ffa6e42d-3424-4131-935a-d238e83bd1e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f3097233-463d-4d12-b6b5-5e2f2cdbddcb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""68539c29-db12-4f43-ba28-ff2523ac36de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""352058c1-5c25-450b-8d07-f653c9396cef"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58505ab5-b479-41f1-a289-c237af26c88e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c963d7f-f8ec-4d39-be00-fe286e3c09f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d8d7b551-7c82-4846-9593-5a7d5d8846ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fb5a975-0692-4a5a-a401-8aa098da64e8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5fa5acd-0406-43ce-80d4-f71c50a90b33"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f434841-067a-492f-8111-f90bbce0504f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c5275e5-5783-4caa-9cd9-3390b8e7ab74"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MK
        m_MK = asset.FindActionMap("MK", throwIfNotFound: true);
        m_MK_Movement = m_MK.FindAction("Movement", throwIfNotFound: true);
        m_MK_Look = m_MK.FindAction("Look", throwIfNotFound: true);
        m_MK_Jump = m_MK.FindAction("Jump", throwIfNotFound: true);
        m_MK_PrimaryFire = m_MK.FindAction("PrimaryFire", throwIfNotFound: true);
        m_MK_SecondaryFire = m_MK.FindAction("SecondaryFire", throwIfNotFound: true);
        m_MK_Jet = m_MK.FindAction("Jet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MK
    private readonly InputActionMap m_MK;
    private IMKActions m_MKActionsCallbackInterface;
    private readonly InputAction m_MK_Movement;
    private readonly InputAction m_MK_Look;
    private readonly InputAction m_MK_Jump;
    private readonly InputAction m_MK_PrimaryFire;
    private readonly InputAction m_MK_SecondaryFire;
    private readonly InputAction m_MK_Jet;
    public struct MKActions
    {
        private @InputActions m_Wrapper;
        public MKActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MK_Movement;
        public InputAction @Look => m_Wrapper.m_MK_Look;
        public InputAction @Jump => m_Wrapper.m_MK_Jump;
        public InputAction @PrimaryFire => m_Wrapper.m_MK_PrimaryFire;
        public InputAction @SecondaryFire => m_Wrapper.m_MK_SecondaryFire;
        public InputAction @Jet => m_Wrapper.m_MK_Jet;
        public InputActionMap Get() { return m_Wrapper.m_MK; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MKActions set) { return set.Get(); }
        public void SetCallbacks(IMKActions instance)
        {
            if (m_Wrapper.m_MKActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MKActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_MKActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_MKActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnJump;
                @PrimaryFire.started -= m_Wrapper.m_MKActionsCallbackInterface.OnPrimaryFire;
                @PrimaryFire.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnPrimaryFire;
                @PrimaryFire.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnPrimaryFire;
                @SecondaryFire.started -= m_Wrapper.m_MKActionsCallbackInterface.OnSecondaryFire;
                @SecondaryFire.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnSecondaryFire;
                @SecondaryFire.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnSecondaryFire;
                @Jet.started -= m_Wrapper.m_MKActionsCallbackInterface.OnJet;
                @Jet.performed -= m_Wrapper.m_MKActionsCallbackInterface.OnJet;
                @Jet.canceled -= m_Wrapper.m_MKActionsCallbackInterface.OnJet;
            }
            m_Wrapper.m_MKActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @PrimaryFire.started += instance.OnPrimaryFire;
                @PrimaryFire.performed += instance.OnPrimaryFire;
                @PrimaryFire.canceled += instance.OnPrimaryFire;
                @SecondaryFire.started += instance.OnSecondaryFire;
                @SecondaryFire.performed += instance.OnSecondaryFire;
                @SecondaryFire.canceled += instance.OnSecondaryFire;
                @Jet.started += instance.OnJet;
                @Jet.performed += instance.OnJet;
                @Jet.canceled += instance.OnJet;
            }
        }
    }
    public MKActions @MK => new MKActions(this);
    public interface IMKActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPrimaryFire(InputAction.CallbackContext context);
        void OnSecondaryFire(InputAction.CallbackContext context);
        void OnJet(InputAction.CallbackContext context);
    }
}
